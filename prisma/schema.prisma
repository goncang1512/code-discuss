// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  question      Question[]
  answer        Answer[]
  community     Community[]

  role   String
  avatar String?

  avatarId String?

  @@map("user")
  Member Member[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Question {
  id            String      @id @default(uuid())
  title         String
  content       String
  userId        String
  tags          String[]
  upvotes       String[]
  downvotes     String[]
  is_accepted   Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  answer       Answer[]
  
  @@map("question")
}

model Answer {
  id            String      @id @default(uuid())
  content       String
  userId        String
  questionId    String
  upvotes       String[]
  downvotes     String[]
  is_answer     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  type          String      @default("answare")

  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("answer")
}

model Community {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  ownerId    String
  visibility  Visibility @default(public)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User     @relation(fields: [ownerId], references: [id])

  @@map("community")
  Member Member[]
}

enum Visibility {
  public
  private
}

model Member {
  id          String    @id @default(uuid())
  userId      String
  communityId String
  role        Role      @default(member)
  status      StatusMember @default(pending)
  joinedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@map("member")
}

enum Role {
  owner
  admin
  member
}

enum StatusMember {
  pending
  approved
  banned
}